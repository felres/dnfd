<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPixelBlue</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initiate
perlin_init();

// grids
elevation_grid = noone;
funkiness_grid = noone;
rivers_grid = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Trawl chunk properties

debug = false&amp;&amp;global.debug;
myManager = noone;
entity_metadata = ds_map_create(); // map of maps
generated_objects = ds_map_create();
rand = 0; // array
rand_i = 0;
rand_max = 100;

// Generation
sea_level = 0.55;
beach_level = 0.65;
river_level = 0.049;
river_edge_level = 0.12;
funk_level = 0.6;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ds cleanup, destroy instances in generated_objects

// grids
ds_grid_destroy_if_exists(elevation_grid);
ds_grid_destroy_if_exists(rivers_grid);
ds_grid_destroy_if_exists(funkiness_grid);

instance_destroy_in_map(generated_objects);
ds_map_destroy(generated_objects);
ds_map_destroy_in_map(entity_metadata);
ds_map_destroy(entity_metadata);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debug

if(debug)
{
    for(var i = 0; i &lt; width; i++)
    {
        for(var j = 0; j &lt; height; j++)
        {
            var value = elevation_grid[# i,j];
            var value2 = abs( map_value(rivers_grid[# i,j], 0, 1, -1, 1) );
            var x1 = x+(i*tileSize);
            var y1 = y+(j*tileSize);
            
            var alpha = animate_wave(0, 0.9);
            if(value &lt; sea_level)
            {
                // sea
                draw_set(alpha, c_aqua);                
            }
            else if(value &lt; beach_level)
            {
                // beach
                if(value2 &lt; river_level)
                    draw_set(alpha, c_maroon);
                else if(value2 &lt; river_edge_level)
                    draw_set(alpha, c_yellow);
                else
                    draw_set(alpha, merge_colour(c_yellow,c_white,0.8)); //beach
            }
            else
            {
                // forest
                if(value2 &lt; river_level)
                    draw_set(alpha, c_blue);
                else if(value2 &lt; river_edge_level)
                    draw_set(alpha, c_lime);
                else
                    draw_set(alpha, c_green); //normal forest
            }
            
            draw_rectangle(x1,y1,x1+tileSize,y1+tileSize,false);
        } //for
    } //for
    draw_set(0.9, c_dkgray);
    draw_rectangle(x, y, x+(width*tileSize), y+(height*tileSize), true);
    draw_set();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
