<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// spawn virtual joycon that simulates gamepad input

percent = 0.09;      //size compared to view
xoffset = 1.3;       //corner offset
yoffset = 1.2;       //corner offset
joy_radius = percent * view_wview;
joy_xoffset = joy_radius * xoffset;
joy_yoffset = joy_radius * yoffset;
joy_x = 0 + joy_xoffset;
joy_y = display_get_gui_height() - joy_yoffset;
joy_alpha = 0.4;
joy_color = c_white;

// shaft
joyshaft_percent = 0.4;      // size compared to joy_radius
joyshaft_radius = joyshaft_percent * joy_radius;
joyshaft_x = 0;
joyshaft_y = 0;
joyshaft_alpha = 0.9;
joyshaft_color = merge_colour(c_white, c_gray, 0.5);

// input
joy_touching = false;
joy_axish = 0;
joy_axisv = 0;
// inputdog interfacing
playerSlot = 1;


mousex = 0;
mousey = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// detect touch inside circle
mousex = room_to_drawgui_x(mouse_x, mouse_y);
mousey = room_to_drawgui_y(mouse_x, mouse_y);
if( !joy_touching &amp;&amp; mouse_check_button_pressed(mb_left) &amp;&amp; point_in_circle(mousex, mousey, joy_x, joy_y, joy_radius) )
{
    joy_touching = true;
}

if( joy_touching &amp;&amp; mouse_check_button_released(mb_left) )
{
    joy_touching = false;
}

if(joy_touching)
{
    var len = point_distance(joy_x, joy_y, mousex, mousey);
    var maxlen = joy_radius - joyshaft_radius;
    len = min(len, maxlen);
    var dir = point_direction(joy_x , joy_y, mousex, mousey);
    joyshaft_x = joy_x + lengthdir_x(len, dir);
    joyshaft_y = joy_y + lengthdir_y(len, dir);
    
    joy_axish = lengthdir_x(len/maxlen, dir);
    joy_axisv = lengthdir_y(len/maxlen, dir);
    
    // We now need to infiltrate inputsDown and change the
    // "left" "right" "up" "down" inputs appropiatley
    var input = inputdog_find_inputmanager_child_by_player(playerSlot);
    var _inputsDown = input.inputsDown;
    var MAX;
    
    MAX = max(inputdog_down("left",playerSlot), clamp(-joy_axish, 0, 1));
    ds_map_replace(_inputsDown, "left", MAX);
    
    MAX = max(inputdog_down("right",playerSlot), clamp(joy_axish, 0, 1));
    ds_map_replace(_inputsDown, "right", MAX);
    
    MAX = max(inputdog_down("up",playerSlot), clamp(-joy_axisv, 0, 1));
    ds_map_replace(_inputsDown, "up", MAX);
    
    MAX = max(inputdog_down("down",playerSlot), clamp(joy_axisv, 0, 1));
    ds_map_replace(_inputsDown, "down", MAX);
    //print( ds_map_to_string(_inputsDown) );
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set(joy_alpha, joy_color);
draw_circle(joy_x, joy_y, joy_radius, false);
if(joy_touching)
{
    draw_set(joyshaft_alpha, joyshaft_color);
    draw_circle(joyshaft_x, joyshaft_y, joyshaft_radius, false);
}

/*
draw_set(1, c_aqua);
draw_circle(mousex, mousey, 3, false);
*/
draw_set();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
