<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Generation Properties


//randomize();
seed = random_range(65536,6553600);
//DS_MAP with possible script outputs and cooresponding tile numbers. Decoded from JSON string.
//As with all data structures, don't forget to destroy it, to prevent memory leaks.
tile_map = json_decode(
        '{ "254": 45, "90": 22, "22": 7, "0": 47, "10": 3, "2": 1,
         "94": 24, "120": 29, "11": 4, "208": 34, "107": 28, "82": 19,
          "216": 37, "86": 20, "223": 41, "214": 36, "104": 26, "222": 40,
           "74": 16, "18": 6, "8": 2, "248": 42, "255": 46, "127": 33,
            "123": 31, "66": 14, "16": 5, "219": 39, "75": 17, "80": 18,
             "122": 30, "30": 11, "126": 32, "31": 12, "250": 43, "88": 21,
              "64": 13, "95": 25, "251": 44, "91": 23, "24": 8, "27": 10,
               "218": 38, "72": 15, "106": 27, "26": 9, "210": 35 }');
chunks = ds_map_create();
chunks_destroyed_entity_ids = ds_map_create(); // map of lists containing entity ids
/// Chunk info
// Each chunk will have chunk_size*chunk_size tiles.
chunk_size = 8;
// Size of each tile in pixels.
chunk_tileSize = 16;
chunk_width = chunk_tileSize * chunk_size;
chunk_height = chunk_tileSize * chunk_size;

/*for(var xx = 0; xx &lt; 3; xx++)
{
    for(var yy = 0; yy &lt; 3; yy++)
    {
        add_chunk(xx, yy);
    }
}*/

//ds_map_print(chunks)

/*
V2.0 AUTOTILING INFORMATION

Refined and AutoTiled - ONLY FOR SPRITE TILES. Refines grid to easy-to-use integers. 
For example all from 0 to &lt;0.15 will be modified to 0, all &gt;0.15 to &lt;0.25 to 10. etc.
And then appllies bitmask based autotiling.

Templates for tileset are included in TILESET_TEMPLATES sprite. For straight edges and rounded.

IMPORTANT: My implementation of autotiling isn't protected from all possible generation variants, 
so if for example stone generates near grass or sand there won't be a sprite to place. 
It's possible to just draw tileset for every variant, but that's just waste of time. 
Make terrain zones wider by tinkering with scr_at_refg_2dig outputs and you'll be fine.
Or just make another cleaning check and replace some terrain types with the rigth one, or some custom sprites.

*/

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// auto-chunk loader/unloader

tmc_dt_instance_init();

cooldown = 30;
max_chunks_per_load = 10;
max_chunks_per_unload = 100;
unloaded_chunks_grid = ds_grid_create(0,0);
loaded_chunks_grid = ds_grid_create(0,0);
dt_alarm[0] = cooldown;
dt_alarm[1] = cooldown/2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game Properties &amp; pathfinding

turbulence = 0;
seaCurrentDir = 0; // ocean current direction

// pathfinding
var cellwidth = chunk_tileSize;
var cellheight = chunk_tileSize;
var h = 200;//floor(room_height/cellwidth);
var w = 200;//floor(room_width/cellheight);
pathfind_grid = mp_grid_create(0, 0,
                            h,
                            w,
                            cellwidth,
                            cellheight);
pathfind_grid_grid = ds_grid_create(h, w);
mp_grid_to_ds_grid(pathfind_grid, pathfind_grid_grid);
var s = ds_grid_to_string(pathfind_grid_grid);
print_vars("pathfind_grid", pathfind_grid);

debug = false&amp;&amp;global.debug;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mouse control Properties

cursor_x = 0;
cursor_y = 0;
chunk_x = 0;
chunk_y = 0;
area_x = 0;
area_y = 0;

createWithMouse = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ds cleanup
ds_map_destroy(tile_map);
ds_map_destroy(chunks);

ds_map_destroy(unloaded_chunks_grid);
ds_map_destroy(loaded_chunks_grid);
ds_lists_destroy_in_map(chunks_destroyed_entity_ids);
ds_map_destroy(chunks_destroyed_entity_ids);

mp_grid_destroy(pathfind_grid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// autounload_chunks()

autounload_chunks()

dt_alarm[1] = cooldown;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// autoload_chunks()

autoload_chunks()

dt_alarm[0] = cooldown;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// tmc_dt_step_full();
tmc_dt_step_full();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create chunks on mouse

if(instance_exists(objCursor) &amp;&amp; createWithMouse)
{
    cursor_x = objCursor.x;
    cursor_y = objCursor.y;
    
    chunk_x = floor(cursor_x/chunk_width);
    chunk_y = floor(cursor_y/chunk_height);
    
    area_x = chunk_x * chunk_width;
    area_y = chunk_y * chunk_height;
    
    if(mouse_check_button_pressed(mb_left))
    {
        add_trawl_chunk(chunk_x, chunk_y);
        
    }
    
    if(mouse_check_button_pressed(mb_right))
    {
        attempt_delete_chunk(chunk_x, chunk_y);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw cursor and where to draw chunks

if(debug)
{
    var twm = objWorldManager;
    
    draw_set(animate_wave(0.01, 0.3));
    mp_grid_draw(pathfind_grid);
    
    draw_set(1, c_fuchsia);
    draw_ellipse(twm.bounds_x1, twm.bounds_y1, twm.bounds_x2, twm.bounds_y2, true);
    
    if(instance_exists(objCursor))
    {
        draw_set(animate_wave(0.2, 0.4, 3));
        draw_rectangle(area_x, area_y, area_x+chunk_width, area_y+chunk_height, false);
    }
    
    draw_set();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
