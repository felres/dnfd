<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Display Properties

/**
 * Information:
 * A view stretches to perfectly FIT a surface
 * A surface is scaled into a window. but respecting the resolution (black bars appear)
 * A window can be resized in a display
 * The display is the monitor (.exe) or the browser window size (HTML5)
 * A monitor cannot be resized.
 *
 * All rooms should have views turned off.
 * 
 * 
 * Tutorial: https://youtu.be/wv3R2Q536ZU?t=216
 */

debug = false; // enables zoom 
drawspecs = false; // and spec drawing
printosinfo = false;
use_fake_display = false;
fake_display_width = 3440;
fake_display_height = 1440;
clamp_aspect_ratio = true;
aspect_ratio_min = 16/10; // 16/10 PC 9/21 mobile
aspect_ratio_max = 21/9;  // 21/9 PC 10/16 mobile
 
ideal_width=0;    // set this to 0 to adjust resolution based on the ideal_height 
ideal_height=600;   // max height of 600 recommended for itch web
if(use_fake_display)
{
    display_width=fake_display_width;
    display_height=fake_display_height;
}
else
{
    display_width=display_get_width();
    display_height=display_get_height();
}

// for changing window size
window_zoom=1;
window_max_zooom=1;

aspect_ratio=display_width/display_height;
if(clamp_aspect_ratio) aspect_ratio = clamp(aspect_ratio, aspect_ratio_min, aspect_ratio_max);

if(ideal_width == 0)
    ideal_width=round(ideal_height*aspect_ratio);
else
    ideal_height=round(ideal_width / aspect_ratio);

print("Before perfect pixel scaling");
print("ideal_width: " + string(ideal_width));
print("ideal_height: " + string(ideal_height));

//Perfect Pixel Scaling
if(display_width mod ideal_width != 0)
{
  var d = round(display_width/ideal_width);
  ideal_width=display_width/d;
}
if(display_height mod ideal_height != 0)
{
  var d = round(display_height/ideal_height);
  ideal_height=display_height/d;
}

//Check for odd numbers
if(ideal_width &amp; 1)
  ideal_width++;
if(ideal_height &amp; 1)
  ideal_height++;

print("After perfect pixel scaling");
print("ideal_width: " + string(ideal_width));
print("ideal_height: " + string(ideal_height));
      
//Calculate Max Zoom
window_max_zoom=floor(display_width/ideal_width);  

// set all views in all rooms
for(var i=1; i&lt;=room_last; i++)
{
  if(room_exists(i))
  {
    room_set_view(i,0,true,0,0,ideal_width,ideal_height,0,0,ideal_width,ideal_height,0,0,0,0,-1);
    room_set_view_enabled(i,true);
  }
}

window_set_size(ideal_width,ideal_height);
display_set_gui_size(ideal_width,ideal_height); // mantain gui size constant
surface_resize(application_surface,ideal_width*window_zoom,ideal_height*window_zoom);
  
alarm[0]=1; //Sorry.  This line got left out of the tutorial vid.  This will center the window after the initial resizing.


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Main Application Post-draw Shader

// Set shader
use_app_shader = true;
shader = sha_lut64_square;

// Set uniform references here
u_strength = shader_get_uniform(shader, "strength");
u_lut_tex = shader_get_sampler_index(shader, "lut_tex");

// Set to what?
strength = 0.0;
strength_desired = strength;
lut_subimg = 1;
lut_subimg_desired = lut_subimg;
lut_tex = sprite_get_texture(sprLut, lut_subimg);

    
if(use_app_shader)
    application_surface_draw_enable(false);
    
    
debug = false&amp;&amp;global.debug;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Vsync and Anti-Aliasing

// Vsync default off
vsync = false;
// Anti aliasing default 0
aa = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delayed Surface resize
surface_resize(application_surface,ideal_width*zoom,ideal_height*zoom);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Center window
window_center();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Transition variables

strength = approach(strength, strength_desired, 0.05);
lut_subimg = lut_subimg_desired;
lut_tex = sprite_get_texture(sprLut, lut_subimg);

/// debug control shader
if(debug)
{
    strength_desired += 0.02*(keyboard_check(vk_right)-keyboard_check(vk_left));
    strength_desired = clamp(strength_desired, 0, 3);
    lut_subimg_desired += keyboard_check_pressed(vk_up);
    lut_subimg_desired -= keyboard_check_pressed(vk_down);
    lut_subimg_desired = clamp(lut_subimg_desired, 0, sprite_get_number(sprLut)-1);
    print_vars("strength_desired", strength_desired, "lut_subimg_desired", lut_subimg_desired);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Restart shader vars
strength = 0.0;
strength_desired = strength;
lut_subimg = 1;
lut_subimg_desired = lut_subimg;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="77">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw entire surface

if(use_app_shader)
{
    texture_set_interpolation_ext(u_lut_tex, true);
    shader_set(shader);
        shader_set_uniform_f(u_strength, strength);
        texture_set_stage(u_lut_tex, lut_tex);
    //draw_surface(application_surface, 0, 0);
    draw_surface_stretched(application_surface, 0, 0,
                window_get_width(),
                window_get_height() );
    shader_reset();
    texture_set_interpolation(false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw specs
if(drawspecs)
{
    
    draw_set_color(c_white);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_text_outlined(5,5,display_write_specs(display.screen)+"#"+
                          display_write_specs(display.window)+"#"+
                          display_write_specs(display.app_surface)+"#"+
                          display_write_specs(display.view)+"#"+
                          display_write_specs(display.gui),
                          c_white,
                          c_black
                  );
    draw_set_halign(fa_right);
    draw_set_valign(fa_bottom);
    draw_text(display_get_gui_width()-5,display_get_gui_height()-5,"Bottom Right");
    
}

if(printosinfo)
{
    // test draw os info
    var s = "";
    s += "#os_browser: "+os_browser_string(os_browser); /*!!!*/
    //s += "#os_device: "+string(os_device);
    s += "#os_type: "+os_type_string(os_type); /*!!!*/
    //s += "#os_version: "+string(os_version);
    //s += "#os_get_config(): "+ os_get_config();
    //s += "#os_get_language(): "+string(os_get_language());
    //s += "#os_get_region(): "+string(os_get_region());
    
    //s += "#os_get_info(): (THIS IS THE DS_MAP)";
    //var map = os_get_info();
    //s += ds_map_to_string(map);
    //ds_map_destroy(map);
    print(s);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
