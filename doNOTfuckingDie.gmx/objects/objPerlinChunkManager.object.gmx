<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Properties

//randomize();
seed = random_range(65536,6553600);
//DS_MAP with possible script outputs and cooresponding tile numbers. Decoded from JSON string.
//As with all data structures, don't forget to destroy it, to prevent memory leaks.
tile_map = json_decode(
        '{ "254": 45, "90": 22, "22": 7, "0": 47, "10": 3, "2": 1,
         "94": 24, "120": 29, "11": 4, "208": 34, "107": 28, "82": 19,
          "216": 37, "86": 20, "223": 41, "214": 36, "104": 26, "222": 40,
           "74": 16, "18": 6, "8": 2, "248": 42, "255": 46, "127": 33,
            "123": 31, "66": 14, "16": 5, "219": 39, "75": 17, "80": 18,
             "122": 30, "30": 11, "126": 32, "31": 12, "250": 43, "88": 21,
              "64": 13, "95": 25, "251": 44, "91": 23, "24": 8, "27": 10,
               "218": 38, "72": 15, "106": 27, "26": 9, "210": 35 }');
chunks = ds_map_create();
/// Chunk info
// Each chunk will have chunk_size*chunk_size tiles.
chunk_size = 16;
// Size of each tile in pixels.
chunk_tileSize = 32;
chunk_width = chunk_tileSize * chunk_size;
chunk_height = chunk_tileSize * chunk_size;

// arguments
///         Octaves - How many layers of noise will be summarised for the final output. More octave, more errosion.
///         Persistence - How fast amplitude of each new octave will diminish. Higher values = more random generation.
///         Lacunarity - How much frequency of each new octave will increase. Lower values = smoother islands \ terrain.
///         Is island - If TRUE, elliptical gradient is applied and an island will be generated.
///                     If FALSE, full room terrain will be generated.
///
///         Wavelength Modifier is basically a Chunk Size.
///         The resulting grid will be obviously the same size, but a larger number
///         will "zoom out" the resulting picture.
///             At 1 the chunk for generation will be = grid width / 1.
///             2 = grid width / 2. Etc.
///             2 - 4 is optimal for good looking islands. 
///             But if you want more eroded islands or more smaller details for full room terrain, you can try higher numbers.
chunk_octaves = 8;
chunk_persistence = 0.6;
chunk_wavelength_modifier = 1;
chunk_lacunarity = 1.2042;
chunk_is_island = false;
chunk_is_refined = false;

/*for(var xx = 0; xx &lt; 3; xx++)
{
    for(var yy = 0; yy &lt; 3; yy++)
    {
        add_chunk(xx, yy);
    }
}*/

//ds_map_print(chunks)

/*
V2.0 AUTOTILING INFORMATION

Refined and AutoTiled - ONLY FOR SPRITE TILES. Refines grid to easy-to-use integers. 
For example all from 0 to &lt;0.15 will be modified to 0, all &gt;0.15 to &lt;0.25 to 10. etc.
And then appllies bitmask based autotiling.

Templates for tileset are included in TILESET_TEMPLATES sprite. For straight edges and rounded.

IMPORTANT: My implementation of autotiling isn't protected from all possible generation variants, 
so if for example stone generates near grass or sand there won't be a sprite to place. 
It's possible to just draw tileset for every variant, but that's just waste of time. 
Make terrain zones wider by tinkering with scr_at_refg_2dig outputs and you'll be fine.
Or just make another cleaning check and replace some terrain types with the rigth one, or some custom sprites.

*/

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Management properties

cursor_x = 0;
cursor_y = 0;
chunk_x = 0;
chunk_y = 0;
area_x = 0;
area_y = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ds cleanup
ds_map_destroy(tile_map);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create chunks on mouse

if(!instance_exists(objCursor)) exit;

cursor_x = objCursor.x;
cursor_y = objCursor.y;

chunk_x = floor(cursor_x/chunk_width);
chunk_y = floor(cursor_y/chunk_height);

area_x = chunk_x * chunk_width;
area_y = chunk_y * chunk_height;

if(mouse_check_button_pressed(mb_left))
{
    if add_chunk(chunk_x, chunk_y)
        print("created chunk");
    else
        print("chunk already exists");
}

if(mouse_check_button_pressed(mb_right))
{
    var key = string(chunk_x)+","+string(chunk_y);
    if( ds_map_exists(chunks, key) )
    {
        instance_destroy( ds_map_find_value(chunks, key) );
        ds_map_delete(chunks, key);
        print("deleted chunk");
    }
    else
        print("chunk doesnt exist");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw cursor and where to draw chunks

if(!instance_exists(objCursor)) exit;

draw_set(animate_wave(0.2, 0.4, 3));
draw_rectangle(area_x, area_y, area_x+chunk_width, area_y+chunk_height, false);
draw_set();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
