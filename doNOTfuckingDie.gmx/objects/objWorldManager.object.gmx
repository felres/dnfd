<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// level depth and sea setup

depth_max = 1000;
depth_min = -1000;

instance_singleton(objSeaFloorShader)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set camera and player focus

var cam = objCamera;

with(cam)
{
    state_switch(camFollow);
}


alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// day time manager

minutes_passed = 8*60//0; // 0-1440 minutes in a day
minute_spd = 1/60; // how many minutes increment per step?

// schedule events
prevHour = 0;
sunrise_hour = 6;
midday_hour = 12;
sunset_hour = 18;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// chunkManager, world bounds

chunkManager = instance_create(x, y, objChunkManager);

// world bounds corners
var worldCenterX = room_width/2;
var worldCenterY = room_height/2;
bounds_x1 = worldCenterX-room_width/4;
bounds_y1 = worldCenterY-room_height/4;
bounds_x2 = worldCenterX+room_width/4;
bounds_y2 = worldCenterY+room_height/4;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create player
player = instance_create(worldCenterX, worldCenterY, objWillow);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// pathfinding 

pathfinding = instance_singleton(obj_pathfinding);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set camera focus to player
player_set_focus(player);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// minutes_passed increment

minutes_passed+=minute_spd*global.delta_step;
minutes_passed = minutes_passed mod 1440;

var curHour = hours_passed();

//print( "TIME: "+get_time_string(1) );

if(curHour != prevHour)
{
    // an hour has passed
    
    // Change shadow vars
    if( between(curHour, sunrise_hour, sunset_hour) ) //day
    {
        with( instance_singleton(objShadowDrawer) )
        {
            // set shadows
            desired_shadow_distance = map_value(abs(curHour - other.midday_hour), 0, 6, 5, 20);
            desired_shadow_angle = map_value(curHour, other.sunrise_hour, other.sunset_hour, degtorad(180), degtorad(0));
            // jump to correct place at first hour
            if(curHour==other.sunrise_hour)
            {
                shadow_distance=desired_shadow_distance;
                shadow_angle=desired_shadow_angle;
            }
            desired_shadow_alpha = 1;
        }
    }
    else // night
    {
        with( instance_singleton(objShadowDrawer) )
        {
            desired_shadow_alpha = 0;
        }
    }
    
    // Change color palette
    var strength_desired_set, lut_subimg_desired_set;
    var min_night_dark = 0.3;
    var max_night_dark = 1;
    var mid_night_dark = lerp(min_night_dark, max_night_dark, 0.666);
    switch(curHour)
    {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
            strength_desired_set = map_value(curHour,0,5,mid_night_dark,max_night_dark);
            lut_subimg_desired_set = 1;
            break;
        case 6: // sunrise
            strength_desired_set = 1.1; lut_subimg_desired_set = 8; break;
        case 7:
            strength_desired_set = 0.4; lut_subimg_desired_set = 8; break;
        case 8:
            strength_desired_set = 0.0; lut_subimg_desired_set = 0; break;
        case 9:
            strength_desired_set = 0.0; lut_subimg_desired_set = 0; break;
        case 10:
            strength_desired_set = 0.0; lut_subimg_desired_set = 0; break;
        case 11:
            strength_desired_set = 0.1; lut_subimg_desired_set = 4; break;
        case 12: // midday
            strength_desired_set = 0.2; lut_subimg_desired_set = 4; break;
        case 13:
            strength_desired_set = 0.1; lut_subimg_desired_set = 4; break;
        case 14:
            strength_desired_set = 0.0; lut_subimg_desired_set = 0; break;
        case 15:
            strength_desired_set = 0.0; lut_subimg_desired_set = 0; break;
        case 16:
            strength_desired_set = 0.0; lut_subimg_desired_set = 0; break;
        case 17:
            strength_desired_set = 0.4; lut_subimg_desired_set = 8; break;
        case 18: // sunset
            strength_desired_set = 1.2; lut_subimg_desired_set = 8; break;
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
            strength_desired_set = map_value(curHour,19,23,min_night_dark,mid_night_dark);
            lut_subimg_desired_set = 1;
            break;
    }
    // apply
    with( objDisplayManager )
    {
        strength_desired = strength_desired_set;
        lut_subimg_desired = lut_subimg_desired_set;
        //state_switch("start");
    }
}

prevHour = curHour;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
