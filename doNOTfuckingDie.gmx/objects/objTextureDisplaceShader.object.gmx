<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Properties
/// This object displaces the sprite index by a given displacement map
debug = false&amp;&amp;global.debug;
shader = shaDisplace;
useCulling = false;
switchTransparency = true;


// starter format
vertex_format_begin();
vertex_format_add_position();
vertex_format_add_colour();
vertex_format_add_textcoord();
my_format = vertex_format_end();

// vertex format vars
drawAlpha = 1;
drawColor = c_white;
vx1 = 0;
vy1 = 0;
vx2 = room_width;
vy2 = room_height;

// shader vars
textureSprite = sprWaterOG;
textureSpriteIndex = 0;
displacementSprite = sprWaterDisplaceNoise;
displacementSpriteIndex = 0;
textureDir = -45;
textureSpd = 0.2;
textureScale = 100; // larger = smaller scale
displacementDir = 45;
displacementDirDiff = 150; // for the second displacement texture
displacementSpd = 0.3;
displacementScale = 50;
distort = 0.11;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// shader references

uDisplacementMap = shader_get_sampler_index(shader, "uDisplacementMap");
uTime = shader_get_uniform(shader,"uTime");
uDistort = shader_get_uniform(shader,"uDistort");
uDisplacementDir = shader_get_uniform(shader,"uDisplacementDir");
uDisplacementSpd = shader_get_uniform(shader,"uDisplacementSpd");
uDisplacementScale = shader_get_uniform(shader,"uDisplacementScale");
uTextureDir = shader_get_uniform(shader,"uTextureDir");
uTextureSpd = shader_get_uniform(shader,"uTextureSpd");
uTextureScale = shader_get_uniform(shader,"uTextureScale");
uDisplacementDirDiff = shader_get_uniform(shader,"uDisplacementDirDiff");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vertex_format_delete(my_format);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set shader variables

//displacementDir = angle_normalize(view_angle+90);

var cam = objCamera;
if(switchTransparency)
{
    drawAlpha = EaseOutSine(cam.camera_pitch-cam.camera_pitch_min,
                            0.61,
                            1,
                            cam.camera_pitch_max-cam.camera_pitch_min);
    drawAlpha = clamp(drawAlpha, 0, 1);
}
                            
if(useCulling)
{
    var offset = -64;
    vx1 = min(cam.culling_x1, cam.culling_x2, cam.culling_x3, cam.culling_x4)-offset;
    vy1 = min(cam.culling_y1, cam.culling_y2, cam.culling_y3, cam.culling_y4)-offset;
    vx2 = max(cam.culling_x1, cam.culling_x2, cam.culling_x3, cam.culling_x4)+offset;
    vy2 = max(cam.culling_y1, cam.culling_y2, cam.culling_y3, cam.culling_y4)+offset;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debug print vars

if(debug)
    print_vars("displacementDir", angle_normalize(displacementDir),
                "view_angle", angle_normalize(view_angle), 
                "diff", abs(angle_normalize(displacementDir)-angle_normalize(view_angle)) );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw texture
texture_set_interpolation(true);
texture_set_repeat(true);
shader_set(shader);

texture_set_stage(uDisplacementMap, sprite_get_texture(displacementSprite, displacementSpriteIndex));
shader_set_uniform_f(uTime, global.total_t/1000000 /10);
shader_set_uniform_f(uDistort, distort);
shader_set_uniform_f(uDisplacementDir, displacementDir);
shader_set_uniform_f(uDisplacementSpd, displacementSpd);
shader_set_uniform_f(uDisplacementScale, displacementScale);
shader_set_uniform_f(uTextureDir, textureDir);
shader_set_uniform_f(uTextureSpd, textureSpd);
shader_set_uniform_f(uTextureScale, textureScale);
shader_set_uniform_f(uDisplacementDirDiff, displacementDirDiff);

/// Vertex buffer
// create vertex
buffer = vertex_create_buffer();
vertex_begin(buffer, my_format);
vertex_buffer_set_corners(buffer, vx1, vy1, vx2, vy2, drawColor, drawAlpha);
vertex_end(buffer);
// submit vertex
var tex = sprite_get_texture(textureSprite, textureSpriteIndex);
vertex_submit(buffer, pr_trianglelist, tex);

shader_reset();
texture_set_interpolation(false);
texture_set_repeat(false);

// delete vertex buffer for next step
vertex_delete_buffer(buffer);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// old draw
/*
//Draw event:
shader_set(shaCellularNoiseOld);
shader_set_uniform_f(shader_get_uniform(shaCellularNoiseOld, "dimensions"), window_get_width(), window_get_height());
draw_primitive_begin(pr_trianglestrip);
draw_vertex(-1, -1);
draw_vertex(1, -1);
draw_vertex(-1, 1);
draw_vertex(1, 1);
draw_primitive_end();
shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
