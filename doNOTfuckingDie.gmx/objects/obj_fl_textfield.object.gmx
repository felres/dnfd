<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fl_topleft</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>obj_fl_component</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>font = -1;
value = "";
start_char = 0;
end_char = 0;
visible_value = ""; //the part of the string that is actually visible
cur = 0; //cursor position
cur_x = 0;
cur_visible = false;
cur_speed = room_speed / 2;
sel = 0;
sel_x = 0;
selecting = false;
limit = 255;
masked = false;
masked_value = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///cursor move timer
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///cursor visibility
cur_visible = !cur_visible;
alarm[1] = cur_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///if has focus

if(has_focus) {

//paste, copy, cut
if(keyboard_check(vk_control)) {
    if(keyboard_check_pressed(ord('V')) &amp;&amp; !disabled) {
        if(clipboard_has_text()) {
            keyboard_string = clipboard_get_text();
        }
    }
    if(keyboard_check_pressed(ord('C'))) {
        if(cur != sel) {
            clipboard_set_text(string_copy(value,min(cur,sel)+1,abs(cur-sel)));
        }
    }
    if(keyboard_check_pressed(ord('X')) &amp;&amp; !disabled) {
        if(cur != sel) {
            clipboard_set_text(string_copy(value,min(cur,sel)+1,abs(cur-sel)));
            value = string_delete(value,min(cur,sel)+1,abs(cur-sel));
            cur = min(cur,sel);
            on_change = true;
            event_user(2); //refresh
        }
    }
}

//add characters to value    
if(keyboard_string != "" &amp;&amp; !disabled) {
    keyboard_string  = string_replace_all(string_replace_all(keyboard_string,chr(13),""),chr(10),"");
    if(cur != sel) {
        value = string_delete(value,min(cur,sel)+1,abs(cur-sel));
        cur = min(cur,sel);
    }
    if(string_length(value)+string_length(keyboard_string) &gt; limit) {
        keyboard_string = string_copy(keyboard_string,1,limit-string_length(value));
    }
    value = string_insert(keyboard_string,value,cur+1);
    cur += string_length(keyboard_string);
    sel = cur;
    on_change = string_length(keyboard_string) &gt; 0;
    keyboard_string = "";
    event_user(2); //refresh
}

//move cursor left
if(keyboard_check_pressed(vk_left)) {alarm[2] = -1;}
if(keyboard_check(vk_left) &amp;&amp; alarm[2] &lt; 0) {
    if(cur != sel) {cur = min(cur,sel);}
    else {cur = max(0,cur-1);}
    sel = cur;
    event_user(2); //refresh
}
if(keyboard_check_pressed(vk_left)) {alarm[2] = cur_speed;}

//move cursor right
if(keyboard_check_pressed(vk_right)) {alarm[2] = -1;}
if(keyboard_check(vk_right) &amp;&amp; alarm[2] &lt; 0) {
        if(cur != sel) {cur = max(cur,sel);}
        else {cur = min(string_length(value),cur+1);}
        sel = cur;
        event_user(2); //refresh
}
if(keyboard_check_pressed(vk_right)) {alarm[2] = cur_speed;}

//backspace
if(keyboard_check_pressed(vk_backspace)) {alarm[2] = -1;}
if(keyboard_check(vk_backspace) &amp;&amp; alarm[2] &lt; 0 &amp;&amp; !disabled) {
        if(cur == sel) {sel = max(0,cur-1);}
        if(cur != sel) {on_change = true;} //there's content to delete
        value = string_delete(value,min(cur,sel)+1,abs(cur-sel));
        cur = min(sel,cur);
        sel = cur;
        event_user(2); //refresh
}
if(keyboard_check_pressed(vk_backspace)) {alarm[2] = cur_speed;}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mouse events     
if(on_press) {
    if(hover) {selecting = true;}
}
else if(on_release) {
    selecting = false;
}
if(pressing &amp;&amp; selecting) {
    draw_set_font(font);

    //adjust cursor
    var str = "";
    
    if(masked) {
            var w = string_width("*");
            for(var i=start_char;i&lt;=end_char;i+=1) {
            if((i-start_char)*w + w/2 &gt;= mouse_x-x) {
                cur = i-1;
                break;   
            }
            cur = i;
        }   
    }
    else {
        for(var i=start_char;i&lt;=end_char;i+=1) {
            var char = fl_string_sanitize(string_char_at(value,i));
            if(string_width(str)+string_width(char)/2 &gt;= mouse_x-x) {
                cur = i-1;
                break;   
            }
            cur = i;
            str += char;
        }
    }
    
    if(on_press) {
        sel = cur;
    }
    
    event_user(2); //refresh
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///refresh

draw_set_font(font);

//sanitize value
if(string_length(value) &gt; limit) {
    value = string_copy(value,1,limit);
}

if(value != "" &amp;&amp; string_count(value,chr(13)) + string_count(value,chr(10)) &gt; 0) {
    value = string_replace_all(string_replace_all(value,chr(13),""),chr(10),"");
}

if(masked) {
    if(string_length(masked_value) != string_length(value)) {
        masked_value = "";
        repeat(string_length(value)) {
            masked_value += "*";
        }
    }
    var val = masked_value;
    
}
else {var val = value;}


//ensure valid cursor and selection position
cur = max(0,min(cur,string_length(val)));
sel = max(0,min(sel,string_length(val)));

//define boundaries on visible letters
if(string_width(fl_string_sanitize(val)) &lt;= width) {
    start_char = min(1,string_length(val));
    end_char = string_length(val);
}
else {
    if(cur &lt; start_char) {
        start_char = max(cur,1);
    }
    else if(string_width(fl_string_sanitize(string_copy(val,start_char,cur-start_char+2))) &gt; width)   {
        for(var i=cur+1;i&gt;0;i-=1) {
            if(string_width(fl_string_sanitize(string_copy(val,i,cur-i+2))) &gt; width) {
                break;
            }
            start_char = i;
        }
    }
    for(var i=start_char;i&lt;=string_length(val);i+=1) {
        if(string_width(fl_string_sanitize(string_copy(val,start_char,i-start_char+1))) &gt; width) {
            break;
        }
        end_char = i;
    }
}

visible_value = fl_string_sanitize(string_copy(val,start_char,end_char-start_char+1));
cur_x = string_width(fl_string_sanitize(string_copy(val,start_char,cur-start_char+1)));
sel_x = max(0,min(width-1,string_width(fl_string_sanitize(string_copy(val,start_char,sel-start_char+1)))));

if(has_focus) {
    alarm[1] = cur_speed;
    cur_visible = true;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[1] = -1;
cur_visible = false;
sel = cur;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>keyboard_string = "";
sel = cur;
event_user(2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>1</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>1</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>2</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
