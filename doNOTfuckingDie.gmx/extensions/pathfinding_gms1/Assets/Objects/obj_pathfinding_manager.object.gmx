<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// This object will be automatically created by obj_pathfinding. Properties.
/*
This object will be automatically created by obj_pathfinding 

This object will queue up pathfinding for obj_pathfinding to do 
and also store routes so they dont need to be calculated again 
*/


pathfinding_queue_x1 = ds_queue_create()
pathfinding_queue_y1 = ds_queue_create()
pathfinding_queue_x2 = ds_queue_create()
pathfinding_queue_y2 = ds_queue_create()
pathfinding_id = ds_queue_create()

pathfinding_database = ds_map_create() // saved as string(argument0)+"a"+string(argument1)+"b"+string(argument2)+"c"+string(argument3)

engine_on = false // do we need to start looking for paths?

pf_debugging_cache_count = 0
pf_debugging_find_count = 0

pf_debugging_frames = 0 // DELETE THIS
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup

ds_queue_destroy(pathfinding_queue_x1)
ds_queue_destroy(pathfinding_queue_y1)
ds_queue_destroy(pathfinding_queue_x2)
ds_queue_destroy(pathfinding_queue_y2)
ds_queue_destroy(pathfinding_id)


// clean out all paths 
find_path_clear_db()

ds_map_destroy(pathfinding_database)




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// queueing?

if (engine_on == true) { // if the pathfining engine is on feed in routes one at a time that need to be solved. 
	
	pf_debugging_frames ++ // for debugging 
	
	if (obj_pathfinding.processing == false) { // its finished so push another path into it
		
		var queue_size = ds_queue_size(pathfinding_queue_x1)
		var _x1 = 0
		var _y1 = 0
		var _x2 = 0
		var _y2 = 0
		var _object_id = -1
		var dothispath = false
			
		
		do { // this object might not need the path any more, if so drop it
			
			var _x1 = ds_queue_dequeue(pathfinding_queue_x1)
			var _y1 = ds_queue_dequeue(pathfinding_queue_y1)
			var _x2 = ds_queue_dequeue(pathfinding_queue_x2)
			var _y2 = ds_queue_dequeue(pathfinding_queue_y2)
			
			var _object_id = ds_queue_dequeue(pathfinding_id)
			
			if (_object_id != undefined and _object_id != -1 and instance_exists(_object_id) and  _object_id.wasat_x == _x1 and _object_id.wasat_y == _y1 and _object_id.goto_x == _x2 and _object_id.goto_y == _y2) {
				dothispath = true
				//show_debug_message("The object still wants this path done")
			} else { // drop this one because the object is dead or doesnt want to path to this place 
				queue_size--
				//show_debug_message("Too lat eto do this object")
			}
		
		} until (queue_size &lt;= 0 or dothispath == true);
		
		if (queue_size &gt; 0) {

		
			obj_pathfinding.start_x = _x1
			obj_pathfinding.start_y = _y1
			obj_pathfinding.end_x = _x2
			obj_pathfinding.end_y = _y2
			
			obj_pathfinding.object_id = _object_id
		
		
			with (obj_pathfinding) {
				find_path_start()
			}
		
			if (queue_size == 1) {
				engine_on = false
			}
		
		}
	}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw pathfinding info

draw_set_colour(c_aqua)
draw_set_halign(fa_left)

draw_text(20,40,"Number in queue: "+string(ds_queue_size(pathfinding_id)))
draw_text(20,60,"Number in db: "+string(ds_map_size(pathfinding_database)))
draw_text(20,80,"Processing on: "+string(obj_pathfinding.processing))
draw_text(20,100,"Manager queue on: "+string(engine_on))
draw_text(20,120,"CPU time: "+string(obj_pathfinding.pf_timer_end)+ "Âµs")
draw_text(20,140,"Paces taken last frame: "+string(obj_pathfinding.pf_debug_loop_count))
draw_text(20,160,"Frames to calculate last path: "+string(obj_pathfinding.pf_debug_frames_to_calculate_last_path))
var total_paths_done = pf_debugging_cache_count+pf_debugging_find_count
draw_text(20,180,"Total paths done: "+string(total_paths_done))
draw_text(20,200,"Number cached: "+string((pf_debugging_cache_count/total_paths_done)*100)+ "%")
draw_text(20,220,"pf_debugging_find_count: "+string(pf_debugging_find_count))
draw_text(20,240,"pf_debugging_cache_count: "+string(pf_debugging_cache_count))
draw_text(20,260,"Average paths par frame: "+string(total_paths_done/pf_debugging_frames))


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
